# Gauss-Modelle

![Bayes:Start!](img/Golem_hex.png){width="10%"}

## Lernsteuerung

### Position im Modulverlauf

@fig-modulverlauf gibt einen √úberblick zum aktuellen Standort im Modulverlauf.

### Lernziele

Nach Absolvieren des jeweiligen Kapitels sollen folgende Lernziele erreicht sein.

Sie k√∂nnen ‚Ä¶

-   ein Gau√ümodell spezifizieren und in R berechnen
-   an Beispielen verdeutlichen, wie sich eine vage bzw. eine informationsreiche Priori-Verteilung auf die Posteriori-Verteilung auswirkt

### Begleitliteratur

Der Stoff dieses Kapitels orientiert sich an @mcelreath2020, Kap. 4.1 bis 4.3.

### Vorbereitung im Eigenstudium

-   [Statistik1, Kap. "Modellg√ºte"](https://statistik1.netlify.app/060-modellguete)
-   [Statistik1, Kap. "Punktmodelle 2"](https://statistik1.netlify.app/070-zusammenhaenge)
-   [Statistik1, Abschnitt "Normalverteilung"](https://statistik1.netlify.app/040-verbildlichen#normalverteilung)

### Ben√∂tigte R-Pakete

F√ºr `rstanarm` wird ggf. [weitere Software](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started) ben√∂tigt.

::: callout-note
Software, und das sind R-Pakete, m√ºssen Sie nur einmalig installieren. Aber bei jedem Start von R bzw. RStudio m√ºssen Sie die (ben√∂tigten!) Pakete starten.
:::

```{r load-libs-hidden}
#| include: false
library(gt)
library(patchwork)
library(figpatch)
library(ggExtra)
library(tidyverse)
library(easystats)
#library(plotly)

theme_set(theme_modern())
```

```{r load-libs-non-hidden}
#| message: false
library(tidyverse)  # Datenjudo
library(rstanarm)  # Bayes-Modelle berechnen
library(easystats)  # Statistik-Komfort
library(DataExplorer)  # Daten verbildlichen
library(ggpubr)  # Daten verbildlichen
library(hexbin)  # stat_bin_hex ggplot2
```

::: callout-important
Ab diesem Kapitel ben√∂tigen Sie das R-Paket `rstanarm`. $\square$
:::

### Ben√∂tigte Daten

Wir ben√∂tigen den Datensatz *!Kung*. Quelle der Daten ist @mcelreath2020 mit Bezug auf Howell.

```{r Post-Regression-3}
Kung_path <-  
  "https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/Howell1a.csv"  

kung <- read.csv(Kung_path) 

head(kung)
```

[Datenquelle](https://raw.githubusercontent.com/sebastiansauer/2021-wise/main/Data/Howell1a.csv)

{{< downloadthis data/Howell1a.csv dname="Howell1a" >}}

### Einstieg

::: {#exm-gauss}
### Was war noch mal eine Normalverteilung?

In diesem Kapitel ben√∂tigen Sie ein gutes Verst√§ndnis der Normalverteilung (die auch als Gauss-Verteilung bezeichnet wird). Fassen Sie daher die wesentlichen Aspekte der Normalverteilung (soweit im Unterricht behandelt) zusammen! $\square$
:::

::: {#exm-post-gauss}
### Was war noch mal eine Posteriori-Verteilung?

In diesem Kapitel befragen wir die Post-Verteilung f√ºr ein normalverteilte Zufallsvariable, n√§mlich die K√∂rpergr√∂√üe der !Kung San. Was war noch mal eine Post-Verteilung und wozu ist sie gut? $\square$
:::

## Wie gro√ü sind die !Kung San?

Dieser Abschnitt basiert auf @mcelreath2020, Kap. 4.3.

### !Kung San

In diesem Abschnitt untersuchen wir eine Forschungsfrage in Zusammenhang mit dem Volk der !Kung, s. @fig-kungs.

> The «ÉKung are one of the San peoples who live mostly on the western edge of the Kalahari desert, Ovamboland (northern Namibia and southern Angola), and Botswana.The names «ÉKung («ÉXun) and Ju are variant words for 'people', preferred by different «ÉKung groups. This band level society used traditional methods of hunting and gathering for subsistence up until the 1970s. Today, the great majority of «ÉKung people live in the villages of Bantu pastoralists and European ranchers.

[Quelle](https://en.wikipedia.org/wiki/%C7%83Kung_people)

Wir interessieren uns f√ºr die Gr√∂√üe der erwachsenen !Kung, 
also filtern wir die Daten entsprechend und speichern die neue Tabelle als `kung_erwachsen`.

```{r Kung-5}
kung_erwachsen <- kung %>% 
  filter(age >= 18)

nrow(kung_erwachsen)
```

$N=`r nrow(kung_erwachsen)`$.

Lassen wir uns einige typische deskriptive Statistiken zum Datensatz ausgeben. `{easystats`} macht das tats√§chlich recht easy, s. @tbl-kung.

```{r Kung-7, echo = TRUE, eval = FALSE}
#| eval: false
describe_distribution(kung_erwachsen)
```

```{r Kung-7a, eval = TRUE}
#| echo: false
#| label: tbl-kung
#| tbl-cap: Statistiken der metrischen Variablen im Kung-Datensatz

describe_distribution(kung_erwachsen) %>% 
  gt() %>% 
  fmt_number(columns = c(3:last_col()-1)) %>% 
  fmt_integer(columns = last_col())
```

Die Verteilungen lassen sich mit `plot_density` (aus `{DataExplorer}`), s. @fig-kung-dens.

```{r}
#| label: fig-kung-dens
#| fig-cap: Verteilungen der Variablen im Kung-Datensatz. Gr√∂√üe und Gewicht sind recht symmetrisch; Alter ist rechtsschief.

plot_density(kung_erwachsen)
```

### Wir gehen apriori von normalverteilter Gr√∂√üe Der !Kung aus

*Forschungsfrage:* Wie gro√ü sind die erwachsenen !Kung im *Durchschnitt*?

Wir interessieren uns also f√ºr den Mittelwert der K√∂rpergr√∂√üe (erwachsene Person[^0800-gauss-1]), $\mu$.

[^0800-gauss-1]: Der Einfachheit halber gehen wir davon aus, dass M√§nner und Frauen im Schnitt gleich gro√ü sind.

![Mensch, [Wikimedia Commons](https://creativecommons.org/licenses/by-sa/3.0)[^0800-gauss-2]](img/human.png){width="5%"}

[^0800-gauss-2]: Bildquelle: Own alterations andFile:SVG_Human_With_All_Organs.svg by Madhero88, CC BY-SA, 3.0

[^0800-gauss-3]: Bildquelle: Own alterations andFile:SVG_Human_With_All_Organs.svg by Madhero88, CC BY-SA, 3.0

Wir sind uns √ºber diesen Mittelwert in der Population nicht sicher[^0800-gauss-4], und unsere Ungewissheit quantifizieren wir anhand einer Normalverteilung mit Mittelwert von 178 cm und Streuung von 20 cm, s. @eq-kung.

[^0800-gauss-4]: Darum machen wir hier ja die ganz Show!


$$\mu \sim \mathcal{N}(178, 20)$$ {#eq-kung}


@eq-kung definiert ein Modell: Unsere Vorstellung der mittleren ("typischen") K√∂rpergr√∂√üe der erwachsenen !Kung.

Warum 178 cm? Kein besonderer Grund. Hier wollen wir den Effekt verschiedener Priori-Werte untersuchen.[^0800-gauss-5] 
In einer echten Untersuchung sollte man einen inhaltlichen Grund f√ºr einen Priori-Wert haben. 
*Oder* man w√§hlt "schwach informative" Prioris, wie das `{rstanarm}` tut: 
Damit l√§sst man kaum Vorab-Information in das Modell einflie√üen, 
aber man verhindert extreme Prioris, die meistens unsinnig sind (so wie eine SD von 100 Metern bei der K√∂rpergr√∂√üe).

[^0800-gauss-5]: Der Autor des zugrundeliegenden Lehrbuchs, Richard McElreath, gibt 178cm als seine K√∂rpergr√∂√üe an.

::: callout-note
Wir haben zwar vorab nicht viel Wissen, aber auch nicht gar keines: 
Eine Gleichverteilung der K√∂rpergr√∂√üen kommt nicht in Frage und ein vages Wissen zum Mittelwert haben wir auch. 
Dar√ºber hinaus ist eine Normalverteilung nicht unplausibel.
:::

```{r p1-p2}
#| echo: false
p_nv_kung_prior <-
  tibble(x = seq(from = 100, to = 250, by = .1)) %>% 
  ggplot(aes(x = x, y = dnorm(x, mean = 178, sd = 20))) +
  geom_line() +
  scale_x_continuous(breaks = seq(from = 100, to = 250, by = 75)) +
  labs(title = "mu ~ dnorm(178, 20)",
       y = "") +
  scale_y_continuous(breaks = NULL)

p_exp_kung_prior <-
  tibble(x = seq(0, 50, by = .01)) %>%
  ggplot(aes(x = x, y = dexp(x, rate = .1))) +
  geom_line() +
  scale_x_continuous() +
  scale_y_continuous(NULL, breaks = NULL) +
  ggtitle("sigma ~ dexp(0.1)")
```

## Unser Gauss-Modell der !Kung

üì∫ [Teil 1](https://youtu.be/cYHArln1DkM)

### Modelldefinition

Wir nehmen an, dass die mittleren Gr√∂√üen, $\mu$, und die tats√§chlichen Gr√∂√üen, $h_i$, normalverteilt sind und $\sigma$ exponentialverteilt ist (da notwendig positiv) ist:

Likelihood: $h_i \sim \mathcal{N}(\mu, \sigma)$

Prior f√ºr den Parameter $\mu$: $\mu \sim \mathcal{N}(178, 20)$

Prior f√ºr den Parameter $\sigma$: $\sigma \sim \mathcal{E}(0, 0.1)$

Daher: $95\%KI( \mu): 178 \pm 40$

In @fig-kung-model sind unsere Priori-Verteilungen visualisiert.

```{r Kung-10}
#| echo: false
#| label: fig-kung-model
#| fig-cap: Prioris unseres (ersten) Kung-Modells (`m_kung`)
#| fig-asp: 0.4
#| fig-subcap: 
#|   - Priori der mittleren K√∂rpergr√∂√üe
#|   - Priori der Sch√§tzungenauigkeit

p_nv_kung_prior
p_exp_kung_prior
```

::: callout-note
Dieses Modell hat zwei Parameter, $\mu$ und $\sigma$. $\square$
:::

### Priori gewichtet mit Likelihood ergibt Posteriori

Zu Erinnerung: Die Posteriori-Wahrscheinlichkeit ist das Ergebnis von Priori-Wahrscheinlichkeit und Likelihood.

Die *K√∂rpergr√∂√üen der einzelnen Personen* $h_i$ nehmen wir als normalverteilt an mit Mittelwert $\mu$ und Streuung $\sigma$:

$$h_i \sim \mathcal{N}(\color{blue}{\mu},\color{green}{\sigma})   \qquad{\text{Likelihood}}$$

### Prioris der Parameter

Der Mittelwert der K√∂rpergr√∂√üe sei *normalverteilt* mit $\mu=178$ und $\sigma=20$:

$$\color{blue}{\mu \sim \mathcal{N}(178, 20)} \qquad{\text{Prior}}$$

Die Streuung $\sigma$ der Gr√∂√üen sei *exponentialverteil* mit $\lambda = 1/8$.

$$\color{green}{\sigma \sim \mathcal{E}(1/8)} \qquad{\text{Prior}}$$

### `m_kung`: fertig!

Jetzt haben wir unser Modell (`m_kung`) definiert!

Weil es so sch√∂n ist, schreiben/zeichnen wir es hier noch einmal auf, @eq-mod-kung1, @fig-mod-kung1.

$$
\begin{aligned}
h_i &\sim \mathcal{N}(\mu, \sigma) & \text{Likelihood}  \\
\mu &\sim \mathcal{N}(178, 20) & \text{Prior} \\
\sigma &\sim \mathcal{E}(1/8) & \text{Prior}
\end{aligned}
$$ {#eq-mod-kung1}

![Modellschema f√ºr das Modell `m_kung`](img/kruschke_regr_zero_predictor.png){#fig-mod-kung1}

Zur Berechnung von `m_kung` nutzen wir jetzt dieses Mal aber *nicht* die Gittermethode (Bayes-Box), sondern lassen R die Arbeit verrichten.

Da gibt es einen neuen Golem, ziemlich kr√§ftig der Bursche, der soll die Arbeit f√ºr uns tun. Der Golem h√∂rt auf den Namen `rstanarm`[^0800-gauss-6].

[^0800-gauss-6]: Hey, *ich* habe ihn diesen Namen nicht gegeben.

::: {.content-visible when-format="html"}
## Zuf√§llige Motivationsabschnitt

![Gut gemacht!](img/pretty_good.gif){width="50%"}
:::

## Posteriori-Verteilung des Gr√∂√üen-Modells, `m_kung`

Okay, Golem, an die Arbeit! Berechne uns das Kung-Modell! Nennen wir das Modell `m_kung`[^0800-gauss-7].

[^0800-gauss-7]: *m* wie Modell und 4, weil das Modell in Kapitel 4 von @mcelreath2020 in √§hnlicher Form berichtet wird, und 1 weil es unsere erste Variante dieses Modells ist.

```{r Kung-4, message=FALSE, results="hide"}
m_kung <- stan_glm(height ~ 1, data = kung_erwachsen, refresh = 0)  # <1>
m41_post <- as_tibble(m_kung)    # <2>
names(m41_post) <- c("mu", "sigma")  # <3>  
```

1.  Bayes-Regressionsmodell berechnen
2.  Modellergebnis in Tabelle umwandeln
3.  Sch√∂nere Namen f√ºr die Spalten geben

Das Argument `refresh = 0` ist nur eine Nebensache, aber es ist praktisch, da es verhindert, dass die Details zum Ziehen der Stichproben am Bildschirm ausgegeben werden. Ich finde diese Ausgabe meist nicht informativ, so dass ich sie lieber unterdr√ºcke. `stan_glm`[^0800-gauss-8] ist eine Funktion, mit der man Regressionsmodelle berechnen kann. Nun haben wir in diesem Fall kein "richtiges" Regressionsmodell. Man k√∂nnte sagen, wir haben eine AV (K√∂rpergr√∂√üe), aber keine UV (keine Pr√§diktoren). Gl√ºcklicherweise k√∂nnen wir auch solche "armen" Regressionsmodelle formulieren: `av ~ 1` bzw. in unserem Beispiel `height ~ 1` bedeutet, dass man nur die Verteilung der AV berechnen m√∂chte, aber keine Pr√§diktoren hat (das soll die `1` symbolisieren). F√ºr das Modell `m_kung` haben wir *keine* Prioris spezifiziert. Wir greifen damit auf die *Voreinstellung* (defaults) der Prioris von `rstanarm` zur√ºck. Das ist ok, aber wenn Sie Vorab-Wissen haben, sollten Sie das an `rstanarm` weitergeben, weil es ja schade w√§re, wenn Sie Wissen haben, das von Ihrem Modell nicht genutzt wird.

[^0800-gauss-8]: aus dem R-Paket `rstanam`, das zuvor installiert und gestartet sein muss, bevor Sie den Befehl nutzen k√∂nnen

Plotten wir mal die gemeinsame Posteriori-Verteilung von `m_kung`, s. @fig-m_kung_neue_prioris-post-joint

::: panel-tabset
### Fliesendiagramm

Gemeinsame Post-Verteilung von Mittelwert und Streuung

```{r post-m_kung-plot}
#| echo: true
#| label: fig-m_kung_neue_prioris-post-joint
#| fig-cap: "Die gemeinsame Post-Verteilung von Mittelwert und Streuung von m_kung_neue_prioris"

m41_post %>% 
  ggplot() +
  aes(x = mu, y = sigma) %>% 
  geom_hex() +
  scale_fill_viridis_c() 
```

Da das Modell *zwei* Parameter hat, k√∂nnen wir auch beide gleichzeitig plotten. Wie man sieht, sind die beiden Parameter unkorreliert. In anderen Modellen k√∂nnen die Parameter korreliert sein.

@fig-m_kung_neue_prioris-post-joint erlaubt uns, f√ºr *jede Kombination von Mittelwert und Streuung* zu fragen, wie wahrscheinlich diese bestimmte Kombination ist.

### Streudiagramm

Hier sind noch zwei andere Visualisierungen der Post-Verteilung von `m_kung_neue_prioris`, s. @fig-m_kung_neue_prioris-post-anders1.

```{r Kung-5-bis}
#| echo: false
#| fig-cap: "Die Postverteilung in unterschiedlicher Darstellung"
#| label: fig-m_kung_neue_prioris-post-anders1


p_m41_post <- 
  m41_post %>% 
  ggplot() +
  aes(x = mu, y = sigma) +
  geom_point(alpha = .1) 

p10 <- ggExtra::ggMarginal(p_m41_post, type = "density")

p20 <- 
  m41_post %>% 
  ggplot(aes(x = mu)) + 
  geom_histogram()

p10
```

### Histogramm

Und hier kommt die Post-Verteilung nur des Mittelwerts.

Nat√ºrlich k√∂nnen wir auch nur von einem einzelnen Parameter (z.B. Mittelwert) die Verteilung untersuchen, s. @fig-m_kung_neue_prioris-post-anders2.

```{r}
#| echo: false
#| fig-cap: Die Post-Verteilung von mu in m_kung_neue_prioris; ein Balkendiagramm bietet sich an.
#| label: fig-m_kung_neue_prioris-post-anders2
p20
```
:::

Fassen wir die Ergebnisse dieses Modells zusammen:

-   Wir bekommen eine Wahrscheinlichkeitsverteilung f√ºr $\mu$ und eine f√ºr $\sigma$ (bzw. eine zweidimensionale Verteilung, f√ºr die $\mu,\sigma$-Paare).

-   Trotz des eher vagen Priors ist die Streuung Posteriori-Werte f√ºr $\mu$ und $\sigma$ klein: Die gro√üe Stichprobe hat die Priori-Werte √ºberstimmt.

-   Ziehen wir Stichproben aus der Posteriori-Verteilung, so k√∂nnen wir interessante Fragen stellen.

### Hallo, Posteriori-Verteilung

... wir h√§tten da mal ein paar Fragen an Sie. üïµ

1.  Mit welcher Wahrscheinlichkeit ist die *mittlere* !Kung-Person gr√∂√üer als 1,55m?
2.  Welche mittlere K√∂rpergr√∂√üe wird mit 95% Wahrscheinlichkeit nicht √ºberschritten, laut dem Modell?
3.  In welchem 90%-PI liegt $\mu$ vermutlich?
4.  Mit welcher Unsicherheit ist die Sch√§tzung der mittleren K√∂rpergr√∂√üe behaftet?
5.  Was ist der mediane Sch√§tzwert der mittleren K√∂rpergr√∂√üe, sozusagen der "Best Guess"?

Antworten folgen etwas weiter unten.

Abschlie√üend, eigentlich nur Spielerei, noch eine andere Visualisierung der Post-Verteilung von $\mu$ und von $\sigma$, @fig-kung3.

```{r Kung-22}
#| echo: false
#| label: fig-kung3
#| fig-cap: Die beiden Randverteilungen der Post-Verteilungen, d.h. die Verteilungen f√ºr mu und f√ºr sigma
#| fig-asp: 0.5

m41_post %>% 
  pivot_longer(mu:sigma) %>% 
  ggplot(aes(x = value)) + 
  geom_density(fill = "grey33") +
  scale_y_continuous(NULL, breaks = NULL) +
  xlab(NULL) +
  theme(
    panel.grid = element_blank(),
    strip.text = element_text(size = 16)  # increase facet header font size
  ) +
  facet_wrap(~ name, scales = "free", 
             labeller = label_parsed,
             ncol = 2)
```

### Posteriori-Stichproben mit `stan_glm()` berechnen

Mit `stan_glm()` k√∂nnen wir komfortabel die Posteriori-Verteilung berechnen. Die Gittermethode wird nicht verwendet, aber die Ergebnisse sind - in bestimmten Situationen - √§hnlich. Es werden aber auch viele Stichproben simuliert (sog. MCMC-Methode). Gibt man keine Priori-Werte an, so greift die Funktion auf Standardwerte zur√ºck.

Grob gesagt berechnen wir die Post-Verteilung mit `stan_glm` so: `stan_glm(AV ~ UV, data = meine_daten)`.

Modelldefinition:

$h_i \sim \mathcal{N}(\mu, \sigma)$, Likelihood

$\mu \sim \mathcal{N}(155, 19)$, Prior zum Gr√∂√üenmittelwert (von Stan √ºbernommen)

$\sigma \sim \mathcal{E}(0.125)$, Prior zur Streuung der Gr√∂√üen (von Stan √ºbernommen)

### Ausgabe von `stan_glm()`

Wir k√∂nnen, wie wir es oben getan haben, uns die Stichproben der Post-Verteilung ausgeben lassen, und diese z.B. plotten.

Wir k√∂nnen es aber auch komfortabler haben ... Mit dem Befehl `parameters` kann man sich die gesch√§tzten Parameterwerte einfach ausgeben lassen (s. @fig-m_kung_neue_prioris-post-joint).

```{r Kung-24, echo = TRUE, results="hide"}
m_kung <- stan_glm(height ~ 1, data = kung_erwachsen, refresh = 0)  # aus Paket rstanarm

parameters(m_kung)  # aus Paket `easystats`
```

```{r Kung-6}
#| echo: false
parameters(m_kung) %>% display()

ci_low <- parameters(m_kung)$CI_low |> round(2)
ci_high <- parameters(m_kung)$CI_high |> round(2)
```

Das Wesentliche: Unser Golem sch√§tzt den Gr√∂√üenmittelwert der Kung auf ca. 155cm bzw. auf einen Bereich von etwa `r ci_low` bis `r ci_high` sch√§tzt. Informativ ist vielleicht noch, dass wir den `Prior` erfahren, der im Modell verwendet wurde. Dazu sp√§ter mehr.

::: callout-note
In dieser Ausgabe sind ein paar Angaben, die wir nicht verstehen, wie `pd`, `Rhat` und `ESS`. Kein Problem: Einfach ignorieren ü§ì Wer N√§heres wissen will, findet [hier](https://easystats.github.io/easystats/) einen Anfang. Au√üerdem sei an @mcelreath2020 und @gelman2021 verwiesen. $\square$
:::

## Wie tickt `stan_glm()`?


::::: columns
::: {.column width="20%"}
![](img/stanlogo.png){width="50%"} [Quelle](https://mc-stan.org/)
:::

::: {.column width="80%"}
Hier ein paar Kerninfos zu `stan_glm`:

-   *Stan* ist eine Software zur Berechnung von Bayesmodellen; das Paket `rstanarm` stellt Stan f√ºr uns bereit.
-   `stan_glm()` ist f√ºr die Berechnung von Regressionsmodellen ausgelegt.
-   Will man nur die Verteilung einer Variablen (wie `heights`) sch√§tzen, so hat man man ... eine Regression ohne Pr√§diktor.
-   Eine Regression ohne Pr√§diktor schreibt man auf Errisch so: `y ~ 1`. Die `1` steht also f√ºr die nicht vorhandene UV; `y` meint die AV (`height`).
-   `(Intercept)` (Achsenabschnitt) gibt den Mittelwert an.
:::
:::::

Mehr findet sich in der [Dokumentation von RstanArm](https://mc-stan.org/rstanarm/).

### Sch√§tzwerte zu den Modellparameter

Die Parameter eines Modells sind die Gr√∂√üen, f√ºr die wir eine Priori-Verteilung annehmen. Au√üerdem w√§hlen wir einen einen Likelihood-Funktion, so dass wir die Likelihood berechnen k√∂nnen. Auf dieser Basis sch√§tzen wir dann die Post-Verteilung. Ich sage *sch√§tzen*, um hervorzuheben, dass wir die wahren Werte nicht kennen, sondern nur eine Vermutung haben, unsere Ungewissheit vorab also (wie immer) in der Priori-Verteilung festnageln und unsere Ungewissheit nach Kenntnis der Daten in der Posteriori-Verteilung quantifizieren. Wie gerade gesehen, lassen sich die Modellparameter (bzw. genauer gesagt deren Sch√§tzungen) einfach mit `parameters(modellname)` auslesen.

### Stichproben aus der Posteriori-Verteilung ziehen

Wie wir es vom Globusversuch gewohnt sind, k√∂nnen wir aber auch Stichproben aus der Post-Verteilung ziehen.

Hier die ersten paar Zeilen von `post_kung`:

```{r Kung-26}
post_kung <- as_tibble(m_kung)
head(post_kung)
```

In einer Regression ohne Pr√§diktoren entspricht der Achsenabschnitt dem Mittelwert der AV, daher gibt uns die Spalte `(Intercept)` Aufschluss √ºber unsere Sch√§tzwerte zu $\mu$ (der K√∂rpergr√∂√üe).

:::: {#exr-kung1}
## Mit welcher Wahrscheinlichkeit ist $\mu>155$?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

```{r Kung-28a, echo = TRUE}

names(post_kung) <- 
  c("mu", "sigma")  # den Namen "(Intercept)" durch "mu" ersetzen, ist pr√§gnanter

post_kung %>% 
  count(mu > 155) %>% 
  mutate(prop = n/sum(n))
```

Die Wahrscheinlichkeit ist nicht hoch, aber nicht auszuschlie√üen, dass die Kung im Schnitt gr√∂√üer als 155 cm sind. Wahrscheinlicher ist jedoch, dass sie kleiner als 155 cm sind. $\square$
:::
::::

:::: {#exr-kung2}
## Mit welcher Wahrscheinlichkeit ist $\mu>165$?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

```{r Kung-28, echo = TRUE}
names(post_kung) <- 
  c("mu", "sigma")  # den Namen "(Intercept)" durch "mu" ersetzen, ist pr√§gnanter

post_kung %>% 
  count(mu > 165) %>% 
  mutate(prop = n/sum(n))
```

Oh, diese Hypothese k√∂nnen wir mit an Sicherheit grenzender Wahrscheinlichkeit ausschlie√üen. Aber Achtung: Das war eine Kleine-Welt-Aussage! Die Wahrscheinlichkeit, die Hypothese $\mu > 165$ auszuschlie√üen ist *nur* dann hoch, wenn das Modell gilt! Wenn also der Golem keinen Mist gebaut hat. Und sind wir mal ehrlich, der Golem tut, was sein:e Herr:in und Meister:in ihm befiehlt. Letztlich liegt es an uns, den Golem auf Spur zu kriegen.
:::
::::

:::: {#exm-kung3}
## Welche mittlere K√∂rpergr√∂√üe wird mit 95% Wahrscheinlichkeit nicht √ºberschritten, laut dem Modell `m_kung`?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

```{r Kung-29, echo = TRUE}
post_kung %>% 
  summarise(q95 = quantile(mu, .95))
```
:::
::::

:::: {#exr-kung4}
## In welchem 90%-PI liegt $\mu$ vermutlich?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

```{r Kung-30, echo = TRUE}
post_kung %>% 
  eti()
```

Ein ETI ist synonym zu PI.
:::
::::

:::: {#exr-kung5}
## Mit welcher Unsicherheit ist die Sch√§tzung der mittleren K√∂rpergr√∂√üe behaftet?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

```{r eval = FALSE}
m_kung %>% 
  parameters()
```

```{r}
#| echo: false
m_kung %>% 
  parameters() |> 
  display()
```

Seeing is believing, s. @fig-m_kung-params-intercept.

```{r}
#| fig-cap: "Parameter von m_kung, nur einer: der Intercept"
#| label: fig-m_kung-params-intercept
m_kung %>% 
  parameters() %>% 
  plot(show_intercept = TRUE)
```

Das Modell ist sich recht sicher: die Ungewissheit der mittleren K√∂rpergr√∂√üe liegt bei nicht viel mehr als einem Zentimeter (95%-CI).
:::
::::

:::: {#exr-kung6}
## Was ist der mediane Sch√§tzwert der mittleren K√∂rpergr√∂√üe, sozusagen der "Best Guess"?

::: {.callout-tip appearance="minimal" collapse="true"}
### L√∂sung

`parameters(m_kung)` hat uns die Antwort schon gegeben: Ca. 155 cm.
:::
::::

üèãÔ∏è √Ñhnliche Fragen bleiben als √úbung f√ºr die Lesis. ü§ì

### Standard-Prioriwerte bei `stan_glm()`

`stan_glm()` nimmt f√ºr uns Priori-Wert an. Welche das sind, kann man sich so anzeigen lassen:

```{r Kung-8-bis, echo = TRUE}
prior_summary(m_kung)
```

`stan_glm()` verwendet (in der Voreinstellung) *schwach informative* Priori-Werte, die nur wenig Vorabwissen in das Modell geben. Es werden daf√ºr die Stichproben-Daten als Priori-Daten verwendet: Mittelwerte und Streuungen der AV werden als Grundlage f√ºr die Priori-Verteilungen herangezogen. Strenggenommen ist das nicht "pures Bayes", weil die Priori-Werte ja *vorab*, also vor Kenntnis der Daten bestimmt werden sollen. Bitte reichen Sie Ihre Beschwerden bei Andrew Gelman ein.

Man sollte diese Standardwerte als Minimalvorschlag sehen. Kennt man sich im Sachgebiet aus, kann man meist bessere Prioris finden. Die Voreinstellung ist nicht zwingend; andere Werte w√§ren auch denkbar.

::: callout-note
### Standardwerte von `stan_glm`

-   `Intercept`: $\mu$, der Mittelwert der Verteilung $Y$
    -   $\mu \sim \mathcal{N}(\bar{Y}, sd(Y)\cdot 2.5)$
    -   als Streuung von $\mu$ wird die 2.5-fache Streuung der Stichprobe (f√ºr $Y$) angenommen.
-   `Auxiliary (sigma)`: $\sigma$, die Streuung der Verteilung $Y$
    -   $\sigma \sim \mathcal{E}(\lambda=1/sd(Y))$
    -   als "Streuung", d.h. $\lambda$ von $h_i$ wird $\frac{1}{sd(Y)}$ angenommen. $\square$
:::

Eine sinnvolle Strategie ist, einen Prior so zu w√§hlen, dass man nicht √ºbergewiss ist, also nicht zu sicher Dinge behauptet, die dann vielleicht doch passieren (also die Ungewissheit zu gering spezifiziert), andererseits sollte man extreme, unplausible Werte ausschlie√üen.

::: callout-important
Bei der Wahl der Prioris gibt es nicht die eine, richtige Wahl. Die beste Entscheidung ist auf transparente Art den Stand der Forschung einflie√üen zu lassen und eigene Entscheidungen zu begr√ºnden. H√§ufig sind mehrere Entscheidungen m√∂glich. M√∂chte man lieber vorsichtig sein, weil man wenig √ºber den Gegenstand wei√ü, dann k√∂nnte man z.B. auf die Voreinstellung von `rstanarm` vertrauen, die "schwachinformativ" ist, also nur wenig Priori-Information in das Modell einflie√üen l√§sst.
:::

### Wenn es schnell gehen muss

`stan_glm()` ist deutlich langsamer als z.B. der befreundete Golem `lm()`. Der Grund f√ºr Stans Langsamkeit ist, dass er viele Stichproben zieht, also viel zu z√§hlen hat. Au√üerdem wiederholt er das Stichprobenziehen (im Standard) 4 Mal, damit sein Meister pr√ºfen kann, ob er (Stan) die Arbeit auch immer richtig gemacht hat. Die Idee dabei ist, wenn alle vier Durchf√ºhrungen (auch "Ketten" engl., chains) genannt, zum etwa gleichen Ergebnis kommen, dann wird schon alles mit rechten Dingen zugegangen sein. Weichen die Ergebnisse der 4 Ketten voneinander ab, so ist Stan ein Fehler unterlaufen, oder, irgendetwas ist "dumm gelaufen". An dieser Stelle schauen wir uns die Ketten nicht n√§her an, aber es sei notiert, dass man die Anzahl der Ketten mit dem Argument `chains` steuern kann. M√∂chte man, dass Stan sich beeilt, so kann man `chains = 1` setzen, das spart Zeit, s. `m_kung_1kette`. 

```{r m41a, echo = TRUE, results="hide"}
m_kung_1kette <- stan_glm(height ~ 1, 
                 data = kung_erwachsen, 
                 chains = 1,  # nur 1 Kette, anstelle von 4 im Default, spart Zeit
                 refresh = 0) 

parameters(m_kung_1kette)  
```

## Modell `m_kung_neue_prioris`: unsere Priori-Werte

üì∫ [Teil 2](https://youtu.be/qIuu-4qRT_0)

Im Modell `m_kung` haben wir auf die Priori-Werte der Voreinstellung von `rstanarm` vertraut. Jetzt lassen wir mal unsere eigenen Priori-Werte einflie√üen, in unserem zweiten Kung-Modell, `m_kung_neue_prioris`.

### m_kung_neue_prioris

Dann lassen wir `stan_glm()` (Stan) unser zweites Modell berechnen.[^0800-gauss-9] Dieses Mal geben wir die Priori-Werte explizit an, @tbl-m_kung_neue_prioris-params.

[^0800-gauss-9]: Hey Stan, los, an die Arbeit!

```{r Kung-15-bis, echo = TRUE}
#| eval: false
m_kung_neue_prioris <- 
  stan_glm(height ~ 1, 
           prior_intercept = normal(178, 20),  # mu
           prior_aux = exponential(0.125),  # sigma
           refresh = FALSE,  # bitte nicht so viel Ausgabe drucken
           data = kung_erwachsen)
parameters(m_kung_neue_prioris)
```

```{r Kung-15-bis-print}
#| echo: false
#| eval: true
#| label: tbl-m_kung_neue_prioris-params
#| tbl-cap: "Parameter von m_kung_neue_prioris mit eigenen Prioriwerten"
m_kung_neue_prioris <- 
  stan_glm(height ~ 1, 
           prior_intercept = normal(178, 20),  # mu
           prior_aux = exponential(0.125),  # sigma
           refresh = FALSE,  # bitte nicht so viel Ausgabe drucken
           seed = 42,  # Zufallszahlen fixieren
           data = kung_erwachsen)
parameters(m_kung_neue_prioris) |> display()
```

Wir haben noch nicht alle Informationen kennengelernt, die in @tbl-m_kung_neue_prioris-params ausgegeben werden. Im Zweifel: Einfach ignorieren. Wichtige F√§higkeit im Studium. ü§ì

::: callout-important
Vergleichen Sie die Parameterwerte von `m_kung` und `m_kung_neue_prioris`! Was f√§llt Ihnen auf? Nichts? Gut! Tats√§chlich liefern beide Modelle sehr √§hnliche Parameterwerte. Die Prioriwerte waren nicht so wichtig, weil wir genug Daten haben. Hat man einigerma√üen viele Daten, so fallen Prioriwerte nicht mehr ins Gewicht, zumindest wenn sie moderat gew√§hlt waren.
:::

```{r Kung-16-bis, eval = FALSE}
#| echo: false
#write_rds(m_kung_neue_prioris, "objects/m_kung_neue_prioris.rds")
```

### Posteriori-Verteilung und Parameter plotten

Leider liefert der Stan-Golem leider keinen braven Tibble (Tabelle) zur√ºck.

> üë®‚Äçüè´ B√∂ser Golem!

> ü§ñ Beim n√§chsten Mal strenge ich mich mehr an!

Daher m√ºssen wir die Ausgabe des Stan-Golemns erst in eine sch√∂ne Tabelle umwandeln:

```{r}
m_kung_neue_prioris_tibble <-
  as_tibble(m_kung_neue_prioris)

head(m_kung_neue_prioris_tibble)
```

Au√üerdem ist der Name der ersten Spalte eigentlich unzul√§ssig, da Spaltennamen in R nicht mit Sonderzeichen anfangen d√ºrfen (sondern mit Buchstaben). Daher m√ºssen wir den Namen mit "Samthandschuhen" anpacken. Auf Errisch sind das die Backticks, die wir um den Namen rumwickeln m√ºssen, s. die folgende Syntax.

::: panel-tabset
### Mit `{ggpubr}`

```{r}
m_kung_neue_prioris_tibble |> 
  gghistogram(x = "`(Intercept)`")  # Aus dem Paket "ggpubr"
```

### Mit `{ggplot}`

```{r}
m_kung_neue_prioris_tibble |> 
  ggplot(aes(x = `(Intercept)`)) +  # Aus dem Paket `ggplot2`
  geom_histogram()
```
:::

Als Ausblick: Ein Vergleich mehrerer Priori-Werte w√§re auch n√ºtzlich, um ein skeptisches Publikum von der Wahl (bzw. der Indifferenz) der gew√§hlten Priori-Werte zu √ºberzeugen.

### Welche K√∂rpergr√∂√üen erwartet unser Modell

Bisher haben wir untersucht, wie die Verteilung der *mittleren* K√∂rpergr√∂√üen, $\mu$, laut unserem Modell aussehen k√∂nnte; wir haben uns also mit der Post-Verteilung von $\mu$ besch√§ftigt. Wir k√∂nnten aber auch an der Frage der Verteilung der *tats√§chlichen* K√∂rpergr√∂√üen, $h_i$, laut Modell, interessiert sein: Wie gro√ü sind sie denn, die !Kung, laut unserem Modell?

Wie wir wissen, liefert unser Stan-Golem eine *Stichproben-Postverteilung*. Wenn wir das Ergebnisobjekt unserer Analyse, `m_kung` in eine Tabelle (Tibble) umwandeln und (die ersten paar Zeilen) betrachen, sehen wir diese Stichproben:

```{r}
m_kung |> as_tibble() |> head()
```

Laut unserem Modell sind die K√∂rpergr√∂√üen, $h_i$, normalverteilt mit $\mu$ und $\sigma$. $\mu$ wird von Stan, der in Begriffen der Regressionsanalyse denkt, schn√∂de als `(Intercept)` bezeichnet. Wir k√∂nnten jetzt also f√ºr jede Zeile eine Normalverteilung berechnen. Und daraus zuf√§llig eine Zahl ziehen. Damit h√§tten wir dann unsere Verteilung von K√∂rpergr√∂√üen laut Modell. Diese Verteilung nennt man auch *Posterior-Pr√§diktiv-Verteilung*. Pr√§diktiv daher, weil sie die Werte der K√∂rpergr√∂√üen "vorhersagt".

Wir k√∂nnen uns diese Verteilung auch komfortabel von R ausgeben lassen, s. @fig-ppcheck.

```{r}
#| layout-ncol: 2
#| label: fig-ppcheck
#| fig-cap: "Die Posterior-Pr√§diktiv-Verteilung: Die Verteilung der tats√§chlichen K√∂rpergr√∂√üen auf Basis der Post-Verteilung. Unser Modell stellt die tats√§chliche Verteilung ganz gut nach."
#| fig-subcap:
#|   - "Die dunkle, dicke Dichtekurve zeigt die tats√§chliche Verteilung der K√∂rpergr√∂√üen im Datensatz. Die hellen, leichten Dichtekurven zeigen die Verteilungen laut der Post-Verteilung unseres Modells."
#|   - "Der wahre Wert einer Test-Statistik (T), hier der Mittelwert der K√∂rpergr√∂√üen, wird mit der Verteilung der K√∂rpergr√∂√üen in Bezug gesetzt."
pp_check(m_kung)
pp_check(m_kung, "stat")
```

## Fazit

<!-- TODO: Die neuen Infosder Gauss-Modelle auf die formel von Bayes Theorem zur√ºck√ºhren. -->

### Zusammenfassung

Wir haben die Posteriori-Verteilung f√ºr ein Gauss-Modell berechnet. Dabei hatten wir ein einfaches Modell mit metrischer Zielvariablen, ohne Pr√§diktoren, betrachtet. Die Zielvariable, K√∂rpergr√∂√üe (`height`), haben wir als normalverteilt mit den Parametern $\mu$ und $\sigma$ angenommen. F√ºr $\mu$ und $\sigma$ haben wir jeweils keinen einzelnen (fixen) Wert angenommen, sondern eine Wahrscheinlichkeitsverteilung, der mit der Priori-Verteilung f√ºr $\mu$ bzw. $\sigma$ festgelegt ist.

### Botschaft von einem Statistiker

![üß° Bleiben Sie dran!](img/chicken_standard_deviation.jpg)

::: callout-important
Kontinuierliches Lernen ist der Schl√ºssel zum Erfolg.
:::

## Vertiefung: Wahl der Priori-Werte

üèéÔ∏è Dieser Abschnitt ist eine VERTIEFUNG und nicht pr√ºfungsrelevant. üèé

### Welche Beobachtungen sind auf Basis unseres Modells zu erwarten?

```{r prior-pred, echo = TRUE}
n <- 1e4

sim <- tibble(sample_mu  = 
      rnorm(n, 
            mean = 178, 
            sd   = 20),
    sample_sigma = 
      rexp(n, 
            rate = 0.1)) %>% 
  mutate(height  = 
      rnorm(n, 
            mean = sample_mu, 
            sd   = sample_sigma))

height_sim_sd <- 
  sd(sim$height) %>% round()
height_sim_mean <- 
  mean(sim$height) %>% round()

```

üí≠ Was denkt der Golem (`m_kung`) *apriori* von der Gr√∂√üe der !Kung?

ü¶æ Ziehen wir mal ein paar Stichproben auf Basis des Modells. Voil√†:

```{r Kung-12}
p3 <- 
  sim %>% 
  ggplot(aes(x = height)) +
  geom_density(fill = "grey33") +
  scale_x_continuous(breaks = c(0, 178-3*height_sim_sd, 178, 178+3*height_sim_sd)) +
  scale_y_continuous(NULL, breaks = NULL) +
  labs(title = "height ~ dnorm(mu, sigma)",
       caption = "X-Achse zeigt MW¬±3SD",
       x = "Gr√∂√üe") +
  theme(panel.grid = element_blank()) 

p3
```

[Quellcode](https://bookdown.org/content/4857/geocentric-models.html#a-gaussian-model-of-height)

### Priori-Werte pr√ºfen mit der Priori-Pr√§diktiv-Verteilung

-   Die Priori-Pr√§diktiv-Verteilung (`sim`) simuliert Beobachtungen (nur) auf Basis der Priori-Annahmen: $h_i \sim \mathcal{N}(\mu, \sigma),$ $\mu \sim \mathcal{N}(178, 20),$ $\sigma \sim \mathcal{E}(0.1)$
-   So k√∂nnen wir pr√ºfen, ob die Priori-Werte vern√ºnftig sind.

Die Priori-Pr√§diktiv-Verteilung zeigt, dass unsere Priori-Werte ziemlich vage sind, also einen zu breiten Bereich an Gr√∂√üenwerten zulassen:

```{r Kung-13}
p3
```

Anteil $h_i > 200$:

```{r Kung-14, echo = TRUE}
anteil_gro√üer_kung <- 
sim %>% 
  count( height > 200) %>% 
  mutate(prop = n/sum(n))
anteil_gro√üer_kung
```

ü§î Sehr gro√üe Buschleute? `r round(anteil_gro√üer_kung$prop[2], 2)*100` Prozent sind gr√∂√üer als 2 Meter. Das ist diskutabel, muss aber nicht zwangsl√§ufig ein schlechter Prior sein.

### Vorhersagen der Priori-Werte

```{r Kung-15}
#| echo: false
sw_path <- paste0(here::here(),"/img/south_west_black_24dp2.png")
se_path <- paste0(here::here(),"/img/south_east_black_24dp2.png")


sw <- fig(sw_path)
se <- fig(se_path)



(p1 + p2) / (se + sw) / (plot_spacer() + p3 + plot_spacer()) 

```

### Extrem vage Priori-Verteilung f√ºr die Streuung?

$$\sigma \sim \mathcal{E}(\lambda=0.01)$$

```{r Kung-16}
#| echo: false
set.seed(4)


# simulate
sim2 <-
  tibble(sample_mu    = rnorm(n, mean = 178, sd = 100),
         sample_sigma = rexp(n, rate = .01)) %>% 
  mutate(height = rnorm(n, mean = sample_mu, sd = sample_sigma))

# compute the values we'll use to break on our x axis
breaks <-
  c(mean(sim2$height) - 3 * sd(sim2$height), 0, mean(sim2$height), mean(sim2$height) + 3 * sd(sim2$height)) %>% 
    round(digits = 0)

# this is just for aesthetics
text <-
  tibble(height = 272 - 25,
         y      = .0013,
         label  = "gr√∂√üter Mann",
         angle  = 90)

# plot
p4 <-
  sim2 %>% 
  ggplot(aes(x = height)) +
  geom_density(fill = "black") +
  geom_vline(xintercept = 0, color = "grey92") +
  geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
  geom_text(data = text,
            aes(y = y, label = label, angle = angle),
            color = "grey92") +
  scale_x_continuous(breaks = breaks, 
                     limits = c(-400, 700)) +
  scale_y_continuous(NULL, breaks = NULL) +
  labs(title = "height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)\nsigma ~ E(0.01)",
       x = "Gr√∂√üe",
       caption = "X-Achse zeigt MW¬±3SD") +
  theme(panel.grid = element_blank()) 

p4
```

Die Streuung der Gr√∂√üen ist weit:

```{r Kung-3}
d <- 
  tibble(x = seq(0,75, by =.01),
         y = dexp(x, rate = .01))

d %>% 
  ggplot(aes(x,y)) +
  geom_line()
```

```{r Kung-17, echo = FALSE, eval = FALSE}
sim2 %>% 
  count(height < 0) %>% 
  mutate(prop = n()/n)
```

ü§î Das Modell geht apriori von ein paar Prozent Menschen mit *negativer* Gr√∂√üe aus. Ein Haufen Riesen üëπ werden auch erwartet.

ü§Ø Vage (flache, informationslose, "neutrale", "objektive") Priori-Werte machen oft keinen Sinn, weil sie extreme, unplausible Werte zulassen.

## Aufgaben

### Papier-und-Bleistift-Aufgaben

<!-- 3. [ReThink4e3](https://datenwerk.netlify.app/posts/ReThink4e3/ReThink4e3.html) -->

1.  [exp-tab](https://datenwerk.netlify.app/posts/exp-tab/)
2.  [exp-tab2](https://datenwerk.netlify.app/posts/exp-tab2/)
3.  [norms-sd](https://datenwerk.netlify.app/posts/norms-sd/)
4.  [small-wide-normal](https://datenwerk.netlify.app/posts/small-wide-normal/)
5.  [exp1](https://datenwerk.netlify.app/posts/exp1/)
6.  [distros](https://datenwerk.netlify.app/posts/distros/)
7.  [mtcars-post_paper](https://datenwerk.netlify.app/posts/mtcars-post_paper/)
8.  [groesse03](https://datenwerk.netlify.app/posts/groesse03/)
9.  [pupil-size2](https://datenwerk.netlify.app/posts/pupil-size2/)
10. [groesse04](https://datenwerk.netlify.app/posts/groesse04/)
11. [ReThink4e2](https://datenwerk.netlify.app/posts/ReThink4e2/ReThink4e2.html)
12. [Priorwahl1](https://datenwerk.netlify.app/posts/Priorwahl1/Priorwahl1.html)

### Aufgaben, f√ºr die man einen Computer ben√∂tigt

1.  [stan_glm01](https://datenwerk.netlify.app/posts/stan_glm01/stan_glm01.html)
2.  [ReThink4e1](https://datenwerk.netlify.app/posts/rethink4e1/rethink4e1)
3.  [ReThink4e3](https://datenwerk.netlify.app/posts/rethink4e3/rethink4e3)
4.  [Kung-height](https://datenwerk.netlify.app/posts/kung-height/kung-height)
5.  [Pupil-size](https://datenwerk.netlify.app/posts/pupil-size/pupil-size)
6.  [IQ-Studentis](https://datenwerk.netlify.app/posts/iq-studentis/iq-studentis)
7.  [Priori-Streuung](https://datenwerk.netlify.app/posts/priori-streuung/priori-streuung)

## ---

![](img/outro-08.jpg){width="100%"}

# Verteilungen




## Lernsteuerung


### Lernziele

Nach Absolvieren des jeweiligen Kapitels sollen folgende Lernziele erreicht sein.

Sie können ...


- den Begriff der Zufallsvariablen erläutern
- die Begriffe von Wahrscheinlichkeitsdichte und Verteilungsfunktion erläutern und anhand einfacher Beispiele ausrechnen
- den Begriff einer Gleichverteilung erläutern und einfache Fallbeispiele ausrechnen
- die Parameter einer Normalverteilung nennen und erläutern




### Prüfungsrelevanter Stoff


Lesen Sie zusätzlich zum Stoff dieses Kapitels noch @bourier_2018, folgende Abschnitte:

- Kap. 6.1 (Zum Begriff Zufallsvariable)
- Kap. 6.3 (Stetige Zufallsvariablen)
- Kap. 7.1.1 (Binomialverteilung)
- Kap. 7.2.1 (Gleichverteilung) und 7.2.3 (Normalverteilung)

Lösen Sie auch die Übungsaufgaben dazu.


Weitere Übungsaufgaben finden Sie im dazugehörigen Übungsbuch, @bourier_statistik-ubungen_2022.


### Benötigte R-Pakete

```{r}
#| message: false
library(patchwork)
library(tidyverse)
```


```{r}
#| include: false
library(gt)
library(patchwork)
library(faux)
library(openintro)
library(easystats)
```



```{r}
#| include: false
theme_set(theme_modern())
```



### Zentrale Begriffe


#### Eigenschaften von Zufallsvariablen

- Zufallsvariable (random variable)
- Diskret vs. stetig
- Wahrscheinlichkeitsdichte (Dichte, (probability) density, f)
- Wahrscheinlichkeitsfunktion (kumulierte Wahrscheinlichkeit, Wahrscheinlichkeitsmasse)


#### Verteilungen

- Gleichverteilung
- Normalverteilung
- Standardnormalverteilung

### Begleitvideos


- [Video 1 zum Thema Verteilungen](https://youtu.be/7GqIE4sKDs4)
- [Video 2 zum Thema Verteilungen](https://youtu.be/HKWwondYsW8)




## Verteilungen


:::callout-important
Eine *Verteilung* zeigt, welche Ausprägungen eine Variable aufweist und wie häufig bzw. wahrscheinlich diese sind. 
Einfach gesprochen, veranschaulicht eine Balken- oder Histogramm eine Verteilung. Man unterscheidet Häufigkeitsverteilungen (s. Abb. @fig-mtcars-freq) von Wahrscheinlichkeitsverteilungen (Abb. @fig-uniform).
:::





### Häufigkeitsverteilung


  
Die Häufigkeitsverteilung eines *diskreten* Merkmals $X$ mit $k$ Ausprägungen zeigt, 
wie häufig die einzelnen Ausprägungen sind.
So hat die Variable *Zylinder* (in einem Datensatz) etwa die Ausprägungen 4,6 und 8.
  
  
```{r Normalverteilung-1, echo = TRUE}
data(mtcars)
  mtcars %>% 
    count(cyl)
```
  
  
Abb. @fig-mtcars-freq, links, visualisiert die Häufigkeitsverteilung von `cyl`.




```{r}
#| echo: false
#| fig-cap: "Häufigkeitsverteilung von `cyl` und `hp` (diskretisiert in 10 Körbe oder Gruppen)"
#| label: fig-mtcars-freq
p1 <- 
  mtcars %>% 
  ggplot(aes(x = cyl)) +
  geom_bar()


p2 <- mtcars %>% 
  ggplot(aes(x = hp)) +
  geom_histogram(bins=10)

plots(p1, p2, n_rows = 1)
```
  



 
Ein *stetiges* Merkmal, wie `hp` (PS-Zahl), lässt sich durch Klassenbildung in ein diskretes umwandeln (diskretisieren), s. Abb. @fig-mtcars-freq, rechts.

### Wahrscheinlichkeitsverteilung

Wahrscheinlichkeitsverteilungen dienen dazu, Ereignissen einer Zufallsvariable eine Wahrscheinlichkeit zuzuordnen.


Eine *diskrete* Wahrscheinlichkeitsverteilung der (diskreten) Zufallsvariablen $X$ ordnet jeder der $k$ Ausprägungen $X=x$ eine Wahrscheinlichkeit $p$ zu. So hat die Variable *Geschlecht eines Babies* die beiden Ausprägungen *Mädchen* und *Junge* mit den Wahrscheinlichkeiten $p_M = 51.2\%$ bzw. $p_J = 48.8\%$ [@gelman_regression_2021].

Bei *stetigen* Zufallsvarialben $X$ geht man von unendlich vielen Ausprägungen aus; die Wahrscheinlichkeit einer bestimmten Ausprägung ist (praktisch) Null: $p(X=x_j)=0, \quad j=1,...,+\infty$. 
So ist die Wahrscheinlichkeit, dass eine Person exakt 166,66666666... cm groß ist, (praktisch) Null.
Man gibt stattdessen die *Dichte* der Wahrscheinlichkeit an: Das ist die Wahrscheinlichkeit(smasse) pro  Einheit von $X$.





## Gleichverteilung

### Indifferenz als Grundlage

Eine Gleichverteilung nimmt an, dass jeder Wert im Ergebnisraum der zugehörigen Zufallsvariable *gleichwahrscheinlich* ist.
Wenn man keinen hinreichenden Grund hat, eine Realisation einer Zufallsvariablen für plausibler als einen anderen zu halten,
ist eine Gleichverteilung eine passende Verteilung.
Gleichverteilungen gibt es im diskreten und im stetigen Fall.

Abb. @fig-uniform zeigt ein Beispiel für eine (stetige) Gleichverteilung.


```{r Normalverteilung-4, fig.asp = 0.5}
#| echo: false
#| fig-cap: 
#|   - "Gleichverteilung min=-1, max=1"
#|   - "Gleichverteilung min=0, max=3"
#| label: fig-uniform
#
#source: https://dk81.github.io/dkmathstats_site/rmath-uniform-plots.html

uniform_Plot <- function(a, b){
  xvals <- data.frame(x = c(a, b)) #Range for x-values
  
  ggplot(data.frame(x = xvals), 
         aes(x = x)) + xlim(c(a, b)) + ylim(0, 1/(b - a)) +
    stat_function(fun = dunif, args = list(min = a, max = b), 
                  geom = "area", 
                  fill = "green", alpha = 0.35) + 
    stat_function(fun = dunif, args = list(min = a, max = b)) +
    labs(x = "X", y = "Dichte")  +
    geom_vline(xintercept = a, linetype = "dashed", colour = "red") +
    geom_vline(xintercept = b, linetype = "dashed", colour = "red")
  
}

uniform_Plot(-1, 1)
#uniform_Plot(0, 3)
```




Bei $X=0$ hat eine Einheit von $X$ die Wahrscheinlichkeitsmasse von 50%.


Definierendes Kennzeichen einer Gleichverteilung ist die *konstante Dichte*.



### Simulation


Möchte man die Verteilungsfunktion einer stetigen Zufallsvariablen berechnen,
kann das ganz schön kompliziert werden, schließlich muss man Integrale lösen.
Aber es gibt einen Trick, wie man die Sache stark vereinfachen kann: 
man simuliert die Verteilung. Was bedeutet das?


Angenommen, die Wartezeit auf einen Bus ist gleichverteilt (engl. *uniform distribution*); 
der Bus kommt regelmäßig und püunktlich alle 10 Minuten. 
Die minimale Wartezeit beträgt also 0 Minuten und die maximale 10 Minuten.
Nennen wir die zugehörige Zufallsvariable $X$, das ist schön kurz.

Dann schreibt man auch:

$$X \sim Unif(0,10).$$



Ja, das sieht fancy aus, aber wo ist der versprochene Trick zum Vereinfachen?
Kommt gleich, Moment.

Eine Frage könnte nun lauten, wie groß ist die Wahrscheinlichkeit, dass man zwischen 3 und 5 Minuten auf den Bus warten muss?


Der Trick ist, dass wir Integralrechnung gegen stumpfes Zählen eintauschen.

Computer (und damit R) haben eingebaut Funktionen, die eine beliebige Zufallszahl ziehen können,
zum Beispiel gleichverteilt

Auf Errisch heißt das Zauberwort `runif()`:

```{r}
#| eval: false
runif(n = 1, min = 0, max = 10)
```


```{r}
#| echo: false
set.seed(42)
runif(n = 1, min = 0, max = 10)
```

Auf Deutsch heißt das: "Hey R, ich hätte gerne eine (daher `n = 1`) Zufallszahl *r* wie *random*,
die gleichverteilt ist (*uniform*) mit `min = 0` und `max = 10`.

(Zu) anschaulich gesprochen: R hat den Bus kommen lassen und es hat gut 9.1 Minuten gedauert,
bis er da war.

Achtung, jetzt kommt's: Jetzt lassen wir R mal $10^5$ (`1e5` auf Computersprech) Busse vorfahren. 
R soll jedes Mal notieren, wie lange man auf den Bus warten musste.^[Machen Sie das mal ohne Computer, wenn Sie ein Wochenende Langeweile haben.]


```{r}
#| eval: false
x_simu <- runif(n = 1e5, min = 0, max = 10)
```


```{r}
#| echo: false
n <- 1e5
set.seed(42)
x_simu <- runif(n = n, min = 0, max = 10)  # gibt Vektor zurück

x_simu_df <-
  tibble(id = 1:n,
         x = x_simu)
```


Schauen wir uns die Verteilung an, @fig-simu-gleichvert.

```{r}
#| label: fig-simu-gleichvert
#| fig-cap: "Simulation einer gleichverteiluten Zufallsvariablen"
ggplot(x_simu_df) +
  aes(x = x_simu) +
  geom_histogram(bins = 50)
```

Okay, unsere Verteilung sieht nicht *exakt* gleichverteilt, aber einigermaßen. 
Gut genug für unsere Zwecke!

So, und jetzt kommt das Ernten.
Wir können jetzt nämlich einfach zählen (`count()`), um die Antwort auf unsere Frage (der Wartezeit 3-5 Min.) zu erhalten.


```{r}
x_simu_df %>% 
  count(Schnittmenge = x > 3 & x < 5)
```


Das Zeichen `&` ist das logische UND, also die Schnittmenge der zwei Mengen $A := \{x|x>3\}$ und $B := \{x|x<5\}$, 
also $A \cap B$.

Wie man sieht, fallen ca. 20% der Stichproben in den entsprechenden Bereich. 


Da viele Probleme, wenn sie komplexer werden, kaum noch analytisch (wie Integrieren) ausrechenbar sind,
greift man in der modernen (Analyse-)Welt oft lieber auf Simulationsverfahren zurück - Dank sei den schnellen Rechnern.
Für uns Menschen ist damit die Aufgabe des Integrierens auf schnödes Zählen zurückgeführt.







## Binomialverteilung {#sec-bin-distrib}

:::callout-important
Die Binomialverteilung dient zur Darstellung der Wahrscheinlichkeit der Ergebnisse eines wiederholten binomialen Zufallexperiments,
eines Zufallsexperiments mit *zwei* Ergebnissen also. Typisches Beispiel ist ein Münzwurf.
Bei jeder Wiederholung des Zufallexperiments bleibt die Wahrscheinlichkeit der Ergebnisse gleich: Die Münze verändert sich nicht durch die Würfe (Ziehen mit Zurücklegen). Außerdem hat ein bestimmtes Ergebnis im ersten Wurf keinen Einfluss auf die Wahrscheinlichkeit eines bestimmten Ergebnisses im zweiten Wurf, etc. 
:::




### Veranschaulichung

Stellen wir uns eine Kistchen^[In den Lehrbüchern häufig als Urne bezeichnet, was den bösen Spott von "Friedhofstatistik" nach sich zog.] mit 5 Losen vor, darunter 2 *T*reffer (Gewinn) und 3 *N*ieten, s. Abb. @fig-urne.
Der Versuch läuft so ab: Wir ziehen ein Los, schauen ob es ein Treffer ist oder nicht, legen es zurück und ziehen erneut.



```{r echo = FALSE}
#| fig-cap: Ein Kästchen mit 5 Losen, darunter 2 Treffer und 3 Nieten.
#| label: fig-urne
#| fig-asp: 0.5
d <- 
  tibble(id = 1:5,
         event = c("T", "T", "N", "N", "N"))


ggplot(d) +
  aes(x = id) +
  theme_minimal() +
  annotate("rect", xmin = 0, xmax = 6, ymin = 0, ymax = 2, fill = "grey80", alpha = .8) +
  geom_point(size = 10, y = 1, aes(color = event) )+
  geom_text(aes(label = event), y = 1) +
  theme(axis.text = element_blank()) +
  labs(x = "", fill = "")
```





:::callout-important

Um die Wahrscheinlichkeitsverteilung einer binomialverteilte Zufallsvariable ausrechnen zu können, muss man zwei Dinge wissen: Erstens die Anzahl der Züge, $n$ (Stichprobengröße) und zweitens die Trefferwahrscheinlichkeit, $p$. 

:::


Wie groß ist die Wahrscheinlichkeit von $A^{\prime}$, d.h. bei $n=4$ Zügen $x=2$ Treffer zu erzielen, gegeben dass die Trefferwahrscheinlichkeit bei $p=2/4$ liegt?

Wir könnten jetzt ein Baumdiagramm zeichnen und pro Pfad die Wahrscheinlichkeit ausrechnen  (Multiplikationssatz), s. @fig-3muenzen.
Die Summe der Wahrscheinlichkeiten der Pfade ist dann die gesuchte Wahrscheinlichkeit, $W$ (Additionssatz).
Das ist einfach, dauert aber.

In diesem Fall ist die Wahrscheinlichkeit eines (günstigen) Pfades, $A$:

$P(A) = P(T)^2 \cdot P(N)^2 = \left( \frac{2}{5} \right)^2 \cdot \left( \frac{3}{5} \right) ^2$.

```{r}
p_a = (2/5)^2 * (3/5)^2
p_a
```

Etwas mühevolles Zählen der Pfade würde uns zeigen, dass es $k=6$ Pfade gibt, die alle die gleiche Wahrscheinlichkeit, $P(A)$, aufweisen.

Damit beträgt die Wahrscheinlichkeit des gesuchten Ereignisses $A^{\prime}$ (2 Treffer bei 4 Zügen):

$P(A^{\prime}) = 6 \cdot P(A)$.

```{r}
p_a_strich = 6 * p_a
p_a_strich
```


Mithilfe der Formel der Binomialverteilung lässt sich das Ergebnis, die Wahrscheinlichkeit von $A^{\prime}$  schneller ausrechnen. Einfach gesprochen sieht sie so aus:



$$P(A^{\prime}) = k \cdot P(A)$$
Dabei steht $k$ für die Anzahl der günstigen Pfade und $P(A)$ für die Wahrscheinlichkeit eines günstigen Pfades (d.h. 2 Treffer und 2 Nieten) und alle Pfade haben die gleiche Wahrscheinlichkeit. 

Die Anzahl der Pfade kann man mit dem *Binomialkoeffizient* ausrechnen, den man so darstellt:

$\tbinom{n}{k}$

Lies: "Wähle aus $n$ möglichen Ereignissen (Pfade im Baum) $k$ günstige Ereignisse (günstige Pfade).

Auf Errisch geht das so:

```{r}
choose(4,2)
```






### Rechnen mit R


Die Binomialverteilung ist in R eingebaut; man kann sich leicht entsprechende Wahrscheinlichkeiten ausrechnen lassen.

Die Wahrscheinlichkeit, bei 4 Zügen 2 Treffer zu erzielen mit $p=2/5$ unter der Annahme einer Binomialverteilung lässt sich so mit R berechnen:

```{r}
dbinom(x = 2, size = 4, prob = 2/5)
```



::: {#exm-binom}

## Pumpstation-Beispiel zur Binomialverteilung

In einer Pumpstation arbeiten 7 Motoren, die wir als identisch annehmen. Mit einer Wahrscheinlichkeit von 5% fällt ein Motor aus und ist für den Rest des Tages nicht einsatzbereit. Der Betrieb kann aufrecht erhalten werden, solange mindestens 5 Motoren arbeiten. Wie groß ist die Wahrscheinlichkeit, dass die Pumpstation aus dem Betrieb fällt?

$P(X=k)$ (oder kurz: $P(k)$) gibt die Wahrscheinlichkeit (Wahrscheinlichkeitsfunktion) an für das Ereignis, dass *k* Motoren arbeiten.

Lassen wir R mal $P(X=5)$ ausrechnen.


```{r}
dbinom(x = 5, size = 7, prob = .95)
```


Es gilt also $P(X=5) \approx .04$. Die Wahrscheinlichkeit, dass (nur) 5 Motoren laufen an einem beliebigen Tag ist relativ gering^[wobei "gering" subjektiv ist, die Betreiberfirma findet diese Wahrscheinlichkeit, dass 2 Pumpen ausfallen, wohl viel zu hoch.]. 


`dbinom()` steht für die Wahrscheinlichkeits*d*ichte (im diskreten Fall, also hier, Wahrscheinlichkeitsfunktion genannt) und `binom` für die Binomialverteilung. `x` gibt die Anzahl der Treffer an (das gesuchte Ereignis, hier 5 Motoren arbeiten); `size` gibt die Stichprobengröße an (hier 7 Motoren).

Damit gilt:

$P(X\ge 5) = P(X=5) + P(X=6) + P(X=7)$

```{r}
p_5 <- dbinom(x = 5, size = 7, prob = .95)
p_6 <- dbinom(x = 6, size = 7, prob = .95)
p_7 <- dbinom(x = 7, size = 7, prob = .95)

p_mind_5 <- p_5 + p_6 + p_7

p_mind_5
```

Die Wahrscheinlichkeit, dass mind. 5 Motoren arbeiten beträgt also `r round(p_mind_5, 4)`.


Das Komplement zu diesem Ereignis ist, dass *nicht* mind. 5 Motoren arbeiten, also höchstens 4 und es daher zu einem Ausfall kommt.

Natürlich gilt $P(\bar{X}) = 1- P(X)$.

```{r}
p_weniger_als_4 <- 1 - p_mind_5
p_weniger_als_4
```


Alternativ kann man mit der Verteilungsfunktion rechnen: $P(X \le 4)$.




In R kann man dafür die Funktion `pbinom()` nutzen (p für (kumulierte) Wahrscheinlichkeit).

```{r}
pbinom(q = 4, size = 7, prob = .95)
```

`q = 4` steht für $X \le 4$, also für höchstens 4 Treffer (arbeitende Motoren); `size = 7` meint die Stichprobengröße, hier 7 Motoren.

:::


:::callout-important

Die Funktion, die die Wahrscheinlichkeit dafür angibt, dass die diskrete Zufallsvariable $X$ eine Realisation annimmt, die kleiner oder gleich (höchstens) einem Wert $X=x$ ist, heißt *Verteilungsfunktion*.

$F(X=x) = P(X \le x)$

:::



### Simulieren


Die Binomialverteilung lässt sich gut als "Münzwurf-Verteilung" auffassen.

Werfen wir eine Münze und sehen wir, was passiert.


```{r}
sample(x = c(0, 1), size = 1)
```


Mit `sample()` ziehen wir eine Stichprobe aus dem Ereignisraum `x`, hier 0 und 1. 
Dabei vereinbaren wir (willkürlich), dass 0 für "Kopf" steht und 1 für "Zahl".
`size = 1` bedeutet, wir werfen die Münze ein Mal (d.h. Stichprobengröße *size* ist 1).

Okay, noch an Bord? Dann werfen wir die Münze 10 Mal:


```{r}
sample(x = c(0, 1), size = 10, replace = TRUE)
```

`replace = TRUE` heißt, wir legen die Münze wieder zurück auf den Tisch, wenn wir sie geworfen haben.
Oder anders ausgedrückt: *Ziehen mit Zurücklegen*.



R, mach dich bereit, wirf die Münze 1000 ($n=10^3$ oder `1e3`) Mal^[R meckert nicht bei langweiligen Aufgaben.]:


```{r}
n <- 1e3

muenze_oft <- 
  sample(x = c(0, 1), size = n, replace = TRUE) 


muenze_oft %>% 
  sum()
```


Mit `sum()` nach dem Pfeifensymbol `%>%` haben wir aus dem Vektor `muenze_oft`, der aus der ersten Zeile resultiert,
die Summe ausgerechnet. 

Jetzt wissen wir, wie oft die Münze "Zahl" gezeigt hat, nämlich `r sum(muenze_oft)` Mal.



::: callout-note
Wenn Sie einen Zufallsversuch wiederholen, muss nicht jedes Mal das gleiche Ergebnis resultieren. Entsprechend wird bei wiederholten Ausführung der Funktion `sample()` nicht immer das gleiche Ergebnis resultieren. Wundern Sie sich also nicht, wenn bei Ihrem Computer eine ähnliche, aber nicht gleiche, Zahl herauskommt.
:::


Visualisieren wir mal unsere Münzwürfe. Dazu erstellen wir zuerst eine geeignete Tabelle, @tbl-muenz.


```{r}
muenz_tab <-
  tibble(
    id = 1:n,
    x = muenze_oft,
    x_cumsum = cumsum(x) / id  # gibt Anteil von "Zahl" wieder
  )
```


```{r}
#| echo: false
#| label: tbl-muenz
#| tbl-cap: "Die kumulierte Summe beim Münzwurf (nur die ersten paar Zeilen)"
head(muenz_tab)
```


Und hier der Anteil von "Zahl" im Verlauf unserer Münzwürfe, s. @fig-lln.


```{r}
#| label: fig-lln
#| fig-cap: "Das Gesetz der großen Zahl am Beispiel der Stabilisierung des Trefferanteils beim wiederholten Münzwurf"
muenz_tab %>% 
  slice_head(n = 1e3) %>% 
  ggplot() +
  aes(x = id, y = x_cumsum) +
  geom_line()
```


Grob gesagt scheint sich ein Münzwurf nach, naja, vielleicht 500 Würfen "einigermaßen" zu stabilisieren.^[Was "einigermaßen" bedeuten soll, ist kein statistischer Begriff, sondern einer, der im echten Leben von den Menschen beantwortet werden muss, die eine Entscheidung zu treffen haben.]



::: callout-important
Das Gesetz der großen Zahl

Zieht man (zufällig) immer mehr Werte aus einer Verteilung (mit endlichem Mittelwert), nähert sich der Mittelwert der Stichprobe immer mehr mit dem Mittelwert (oft als Erwartungswert bezeichnet) der Verteilung an 
:::



```{r lln, out.width = "100%", fig.align="center", fig.asp = .5}
#| eval: false
#| echo: false
source(paste0(here::here(),"/R-Code/img15.R"))
```



<!-- 3b1b hat ein [nettes Video zu diesem Thema](https://youtu.be/8idr1WZ1A7Q), das sich als Vertiefung eignet. -->




## Normalverteilung


Normalverteilungen haben eine charakteristische Glockenform.
Normalverteilungen können sich unterscheiden  in ihrem Mittelwert $\mu$ und ihrer Streuung, $\sigma$.
Diese beiden Größen ("Parameter") determinieren den Graphen einer bestimmten Normalverteilungsfunktion, s. @fig-norms.
Sind diese beiden Parameter bekannt, so ist die Dichte jedes beliebigen Datenpunkts (aus dieser Normalverteilung) bestimmt.

![Beispiele von Normalverteilungen mit verschiedenen Mittelwerten und Streuungen, Quelle: Wikipedia](img/normals.png){#fig-norms width=50% fig-align="center"}


Beispiel: Wie groß sind Studentis ([Quelle des Datensatzes](https://rdrr.io/cran/openintro/man/speed_gender_height.html))? 

Das Quantil von z.B. 25% zeigt die Körpergröße der 25% kleinsten Studentis an, analog für 50%, 75%:

```{r QM2-Thema3-Teil1-5, echo = FALSE}
data(speed_gender_height)

height_summary <- 
  speed_gender_height %>% 
  drop_na(height) %>% 
  mutate(height = height * 2.54) %>% 
  summarise(q25 = quantile(height, prob = .25),
            q50 = quantile(height, prob = .5),
            q75 = quantile(height, prob = .75))

height_summary %>% 
  gt()
```

@ fig-quantiles zeigt eine Visualisierung der Quantile.

```{r QM2-Thema3-Teil1-6}
#| echo: false
#| results: hold
#| fig-width: 12
#| fig-asp: 0.618
#| fig-cap: "Quantile verschieden visualisiert"
#| label: fig-quantiles

speed_gender_height <-
  speed_gender_height %>% 
  mutate(height_cm = height * 2.54)

p1 <- 
  speed_gender_height %>% 
  ggplot() +
  aes(x = 1, y = height_cm) +
  geom_boxplot() +
  labs(x = "",
       y = "Größe in cm",
       title = "Die Box zeigt das 25%-, 50%- und 75%-Quantil")

height_summary_long <- 
  height_summary %>% 
  pivot_longer(everything(),
               names_to = "q",
               values_to = "height_cm")

p2 <- 
  speed_gender_height %>% 
  ggplot() +
  aes(x = height_cm) +
  geom_histogram() +
  geom_vline(data = height_summary_long,
             aes(xintercept = height_cm)) +
  geom_text(data = height_summary_long,
             aes(x = height_cm+1,
                 y = 0,
                 label = paste0(q, ": ",height_cm)),
             angle = 90,
            hjust = 0,
            color = "white"
             ) +
  labs(title = "Die vertikalen Striche zeigen die Quantile",
       y = "Häufigkeit")

plots(p1, p2)
```


::: callout-note
Das 25%-Quantil nennt man *1. Quartil*, das 50%-Quantil auch *2. Quartil*, das 75%-Quantil das *3. Quartil*, und das 100%-Quantil (Maximalwert) das *4. Quartil*.
:::








### Normal auf dem Fußballfeld

Sie und 100 Ihrer besten Freunde stehen auf der Mittellinie eines Fußballfelds. Auf Kommando werfen alle jeweils eine Münze; bei Kopf geht man einen Schritt nach links, bei Zahl nach rechts. Das wird 16 Mal wiederholt. Wie wird die Verteilung der Positionen wohl aussehen?


```{r Normalverteilung-6, fig.asp = .45, fig.width=7}
#| echo: false
source(paste0(here::here(),"/R-Code/img13.R"))
```

[@mcelreath_statistical_2020]







### Normal durch Addieren

Die Summe vieler (gleich starker) Zufallswerte (aus der gleichen Verteilung) erzeugt eine Normalverteilung; egal aus welcher Verteilung die Zufallswerte kommen (Zentraler Grenzwertsatz), vgl. @fig-fussball.


```{r Normalverteilung-7, out.width="100%", fig.asp = 0.5, fig.align="center", fig.width=7}
#| echo: false
#| fig-cap: "Entstehen einer Normalverteilung durch Addition vieler unabhgängiger Ereignisse"
#| label: fig-fussball
source(paste0(here::here(),"/R-Code/img14.R"))
```



Nicht verwechseln:


```{r Normalverteilung-8, echo = FALSE, out.width="30%", fig.align='center'}
knitr::include_graphics("img/ch33910f1.jpg")
```






### Normalverteilung vs. randlastige Verteilungen


```{r Normalverteilung-9, fig.asp=0.5}
#| echo: false
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "blue") +
  labs(y = "Dichte", x = "Merkmal, X") +
  stat_function(fun = dt, n = 101, args = list(df = 1, ncp =0), color = "red") +
  labs(caption = "Blau: Normalverteilung\nRot: randlastige Verteilung (t-Verteilung mit df=1)")
```


Bei randlastigen Verteilungen ("fat tails") kommen Extremereignisse viel häufiger vor als bei Normalverteilungen. Deshalb ist es wichtig sein, zu wissen, ob eine Normalverteilung oder eine randlastige Verteilung vorliegt. Viele statistische Methoden sind nicht zuverlässig bei (stark) randlastigen Methoden.




### Beispiele für Normal- und randlastige Verteilungen



Normal verteilt:

- Größe 
- Münzwürfe
- Gewicht
- IQ
- Blutdruck
- Ausschuss einer Maschine


Randlastig verteilt:

- Vermögen
- Verkaufte Bücher
- Ruhm
- Aktienkurse
- Erdbeben
- Pandemien
- Kriege
- Erfolg auf Tinder
- Meteroritengröße
- Stadtgrößen



### Formel der Normalverteilung

Vereinfacht ausgedrückt lässt die Normalverteilung $\mathcal{N}$ durch Exponenzieren einer Quadratfunktion beschreiben:

$$\mathcal{N} \propto e^{-x^2}$$

mit $e=2.71...$, der Eulerschen Zahl.^[Das Zeichen $y \propto x$ bedeutet "x ist proportional zu y", also $y = mx$.]





```{r norm, eval = FALSE, echo = TRUE}
#| fig-asp: 0.5
d <-
  tibble(
    x = seq(-3, 3, 
            length.out = 100),
    y = exp(-x^2)
  )

d %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_line()
```



```{r Normalverteilung-10, echo = FALSE, ref.label = "norm"}
```


Eine Normalverteilung mit $\mu=0$ und $\sigma=1$ nennt man auch *Standardnormalverteilung* und 
man schreibt:


$$IQ \sim \mathcal{N}(0,1)$$

Die Normalverteilung wird auch *[Gauss](https://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F)-Verteilung* oder *Glockenkurve* genannt.





### Simulation einer Normalverteilung


R hat eine Funktion eingebaut zur Erzeugung von Zufallszahlen (Zufallszahlengenerator), z.B. normalverteilte.
Man übergibt dieser Funktion den gewünschten Mittelwert und die gewünschte Streuung und die Funktion zieht dann zufällig Werte aus dieser Verteilung.

Diesen Zufallszahlengenerator kann man mit einem Duschkopf vergleichen, s. @fig-shower.
An diesem Duschkopf kann man einen Schwenker einstellen, der den Duschkopf
ausrichtet, also steuert, ob die Wassertropfen weit in die eine oder die andere
Richtugn fallen.
Zweitens hat unser Duschkopf noch einen Streuregler,
der den Wasserstrahl entweder eng bündelt^[Massagedusche, behauptet der Hersteller] oder weit auseinanderfächert. Im ersten Fall fällt der Wasserstrahl eng und schmal aus. Im zweiten Fall fällt der Wasserstrahl breit aus.

![Zufallszahlengenerator als Duschkopf](img/shower-data.png){#fig-shower width="50%"}

[Quelle](https://jkkweb.sitehost.iu.edu/KruschkeFreqAndBayesAppTutorial.html#data_are_described_by_mathematical_models): John Kruschke.



Eine Zufallszahl (*r*andom number), die *norm*alverteilt ist, mit $\mu=0$ und $\sigma=1$ kann man in R so erzeugen:


```{r}
rnorm(n = 1, mean = 0, sd = 1)
```



Ein Fallbeispiel: Der Inhalt einer Tüte mit Zucker, $X$, sei normalverteilt mit $\mu = 10002$ g und $\sigma=1.5$ g. Aus vertragsrechtlichen Gründen darf das Füllgewicht von 1000g nicht unterschritten werden, sonst drohen Konventionalstrafen.

Wie groß ist die Wahrscheinlichkeit, dass 1000g unterschritten werden?


Simulieren wir uns 1e4 Zuckertüten!

```{r}
n <- 1e4
d <- 
  tibble(
    id = 1:n,
    x = rnorm(n = n, mean = 1002, sd = 1.5)
  )

head(d)
```


Zählen wir, viele der Zuckertüten ein Gewicht von weniger als 1000g aufweisen:


```{r}
d %>% 
  count(x < 1000)
```


Ein ziemlich^["Ziemlich" ist natürlich subjektiv; je nach Situation kann es zu viel oder nicht zu viel sein.] kleiner Anteil. Rechnen wir uns noch die Anteile (*prop*ortion) aus:

```{r}
d %>% 
  count(x < 1000) %>% 
  mutate(prop = n/1e4)
```







### IQ-Verteilung

Die Verteilung der Zufallsvariablen IQ ist normalverteilt mit einem Mittelwert von 100 und einer Streuung von 15, s. @fig-norm-100-15:

$IQ \sim \mathcal{N}(100,15)$

- Wie schlau muss man sein, um zu den unteren 75%, 50%, 25%, 5%, 1% zu gehören?
- Anders gesagt: Welcher IQ-Wert wird von 75%, 50%, ... der Leute nicht überschritten?


![Visualisierung der theoretischen IQ-Verteilung](img/norm-100-15.png){#fig-norm-100-15 width="50%"}

[Quelle:](https://jkkweb.sitehost.iu.edu/KruschkeFreqAndBayesAppTutorial.html#data_are_described_by_mathematical_models): John Kruschke.


Ziehen wir zufällig $1e4$ Stichproben aus $\mathcal{N}(100,15)$ und berechnen die Quantile:

```{r echo = TRUE}
d <-
  tibble(
  iq = rnorm(n = 1e4, 
             mean = 100, 
             sd = 15))

probs <- c(0.75,.5,.25,.05,.01)

d_summary <- d %>% 
  summarise(p = probs,
            q = quantile(iq, probs))
```



```{r}
#| echo: false
d_summary %>% 
  gt() %>% 
  fmt_number(p, decimals = 2) %>% 
  fmt_number(q, decimals = 0)
```

Das *Quantil* $q$ zur kumulierten Wahrscheinlichkeit $p=75$ ist 110, etc. 






Umgekehrt können wir uns auch fragen: Gegeben einer Realisation der Zufallsvariablen (z.B. IQ), was ist die zugehörige Wahrscheinlichkeit (Wert der Verteilungsfunktion?)


- Welcher Anteil der Fläche unter der Kurve $p$ gehört zu den IQ-Werten 75, 100, 115, 130?
- Anders gesagt: Welcher Anteil der Wahrscheinlichkeitsmasse der Verteilung liegt unter IQ=75, IQ=100, etc.?


Ziehen wir Stichproben aus $\mathcal{N}(100,15)$:

```{r echo = TRUE, eval = FALSE}
d <-
  tibble(
    iq = rnorm(1e4, 
               mean = 100, 
               sd = 15)) %>% 
  mutate(iq = round(iq))

qs <- c(75,100,115,130)

d %>% 
  count(p_100 = iq < 100) %>% 
  mutate(prop = n / sum(n)) 
```



```{r echo = FALSE, eval = TRUE}
d <-
  tibble(
    iq = rnorm(1e4, 
               mean = 100, 
               sd = 15)) %>% 
  mutate(iq = round(iq))

qs <- c(75,100,115,130)

d %>% 
  count(p_100 = iq < 100) %>% 
  mutate(prop = n / sum(n)) %>% 
  gt() %>% 
  fmt_number(columns = 3)
```

Anstelle von `iq < 100` kann man `iq < 115` einsetzen, etc.
 
```{r eval= FALSE}
#| echo: false
d %>% 
  mutate(prop = percent_rank(iq)) %>% 
  filter(iq %in% qs) %>% 
  distinct(iq, .keep_all = TRUE)
```

Die *Verteilungsfunktion* (der Anteil der Wahrscheinlichkeitsmasse), `p`, für IQ-Werte nicht größer als 100,  $IQ\le100$, ist 50%, etc. 



### Quantile der Normalverteilung 





- *Quantile* teilen eine Verteilung so ein, dass ein Anteil $p$ kleiner oder gleich und der andere Teil $1-p$ größer  dem Quantil $q$ ist.
    - *Beispiel*: "50%-Quantil = 100" meint, dass 50% der Elemente der Verteilung einen Wert kleiner oder gleich als 100 haben.
    
- Die *Verteilungsfunktion F* (für einen Wert $x$) gibt die Wahrscheinlichkeit an, dass die zugehörige Zufallsvariable $X$ einen Wert höchstens so groß wie $x$ annimmt. Sie zeigt also die kumulierte Wahrscheinlichkeit $[-\infty, q)$.
    - *Beispiel*: "F(100) = 50%" meint: Die Wahrscheinlichkeit für eine Ausprägung von höchstens als 100 beträgt 50%.


Schauen wir uns die Quartile der Normalverteilung einmal näher an.
Wir gehen von einer Normalverteilung aus, wie sie zur Beschreibung von Intelligenz (IQ) verwendet wird, s. @fig-nv-quants.


```{r }
#| echo: false
#| label: fig-nv-quants
#| fig-cap: Quantile der Normalverteiltung

  

p1 <- 
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, 100)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "X", y = "Dichte",
       title = "50%-Quantil: 100; Verteilungsfunktion von 100:50%") +
  scale_y_continuous(breaks = NULL)

p2 <-
    ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, 125)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "X", y = "Dichte",
       title = "95%-Quantil: 125; Verteilungsfunktion von 125:95%") +
  scale_y_continuous(breaks = NULL)


plots(p1, p2)
```

$$IQ \sim \mathcal{N}(100, 15)$$
Mit R kann man sich die beiden Größen komfortabel berechnen lassen:

```{r echo = TRUE, eval = FALSE}
qnorm(.50, mean = 100, sd = 15)  # 50%-Quantil
pnorm(100, mean = 100, sd = 15)  # Verteilungsfunktion für IQ=100
```


Betrachten wir einige wichtigen Quantile, s. @fig-nv-quants2.

```{r}
#| echo: false
q_p50 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, 100)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = "50%-Quantil: 100") +
  scale_y_continuous(breaks = NULL)
```


```{r}
#| echo: false
q_inv <- .25
q_p <- qnorm(q_inv, mean = 100, sd= 15)
p_q <- pnorm(q_p, mean = 100, sd= 15)

q_p25 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, q_p)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = paste0(q_inv,"-Quantil: ",round(q_p)),
       caption = "MW-0.68sd") +
  scale_y_continuous(breaks = NULL)
```


```{r}
#| echo: false
q_inv <- .95
q_p <- qnorm(q_inv, mean = 100, sd= 15)

q_p95 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, q_p)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = paste0(q_inv,"-Quantil: ",round(q_p)),
       caption = "MW+1.64sd") +
  scale_y_continuous(breaks = NULL)
```



```{r}
#| echo: false
q_inv <- .975
q_p <- qnorm(q_inv, mean = 100, sd= 15)
#pnorm(115, mean= 100, sd = 15)

q_p975 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, q_p)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = paste0(q_inv,"-Quantil: ",round(q_p)),
       caption = "MW+2SD") +
  scale_y_continuous(breaks = NULL)
```





```{r}
#| echo: false
q_inv <- .84
q_p <- qnorm(q_inv, mean = 100, sd= 15)
#pnorm(115, mean= 100, sd = 15)

q_p84 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, q_p)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = paste0(q_inv,"-Quantil: ",round(q_p)),
       caption = "MW+1sd") +
  scale_y_continuous(breaks = NULL)
```

```{r}
#| echo: false
q_inv <- .69
q_p <- qnorm(q_inv, mean = 100, sd= 15)  # halbe SD
#pnorm(107.5, mean= 100, sd = 15)

q_p69 <-
  ggplot(NULL, aes(c(60,145))) +
  geom_area(stat = "function", fun = dnorm, fill = "grey", args = list(mean=100,sd = 15), xlim= c(60, q_p)) +
  geom_line(stat = "function", fun = dnorm, args = list(mean=100,sd = 15)) +
  labs(x = "IQ", y = "Dichte",
       title = paste0(q_inv,"-Quantil: ",round(q_p)),
       caption = "MW+0.5sd") +
  scale_y_continuous(breaks = NULL)
```



```{r fig-nv-quants2}
#| echo: false
#| label: fig-nv-quants2
#| fig-width: 10
#| fig-cap: Verschiedene Quantil der Normalverteilung

(q_p50 + q_p25 + q_p69) / (q_p95 + q_p975 + q_p84)
```


### Standardnormalverteilung


```{r Normalverteilung-3}
#| echo: false
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1)) +
  labs(y = "Dichte", x = "Merkmal, X") +
  ggtitle("Normalverteilung mit Mittelwert 0 und SD 1")
```

Bei $X=0$:

- hat eine Einheit von $X$ die Wahrscheinlichkeitsmasse von 40% (Wahrscheinlichkeitsdichte)
- sind 50% der Wahrscheinlichkeitsmasse (Fläche unter der Kurve) kleiner als dieser Wert (Verteilungsfunktion).

In Summe liegen 100% der Wahrscheinlichkeitsmasse unter der Kurve.


### Normalverteilung als konservative Wahl

Dem Mathematiker [Carl Friedrich Gauss](https://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F) (s. @fig-gauss) wird die Ehre zuerkannt,
die Normalverteilung eingeführt zu haben.

```{r Normalverteilung-1-bis, echo = FALSE }
#| fig-align: "center"
#| label: fig-gauss
#| fig-cap: "Zehn-Mark-Geldschein mit Gauss und Normalverteilung"
knitr::include_graphics("img/10_Deutsche_Mark_-_detail.png")
```

Quelle: Uni Greifswald, Public domain, via Wikimedia Commons


::: callout-note
*Ontologische Begründung*

- Wirken viele, gleichstarke Einflüsse additiv zusammen, entsteht eine Normalverteilung  [@mcelreath_statistical_2020], Kap. 4.1.4.

*Epistemologische Begründung*

- Wenn wir nur wissen, dass eine Variable über einen endlichen Mittelwert und eine endliche Varianz verfügt und wir keine weiteren Annahmen treffen bzw. über kein weiteres Vorwissen verfügen, dann ist die Normalverteilung die plausibelste Verteilung (maximale Entropie) [@mcelreath_statistical_2020], Kap. 7 und 10.
:::


<!-- ### Zweidimensionale Normalverteilung, unkorreliert -->


<!-- ```{r Normalverteilung-11, out.width="70%", fig.align="center"} -->
<!-- #| echo: false -->
<!-- knitr::include_graphics("https://github.com/sebastiansauer/QM2-Folien/raw/main/img/mult-norm.png") -->
<!-- ``` -->


<!-- [Quelle](https://tex.stackexchange.com/questions/31708/draw-a-bivariate-normal-distribution-in-tikz) -->

<!-- [Vgl. auch dieses Diagramm](http://ballistipedia.com/index.php?title=File:Bivariate.png)] -->




<!-- ### 2D-Normalverteilung mit R, unkorreliert -->

<!-- $r(X,Y) = 0$ -->




<!-- ```{r norm-plot1} -->
<!-- #| echo: false -->
<!-- #| eval: false -->
<!-- #| fig-asp: 1 -->
<!-- #| out-width: "50%" -->
<!-- d1 <-  -->
<!--   tibble(  -->
<!--     x=rnorm(1e4),  -->
<!--     y=rnorm(1e4) -->
<!--   ) -->

<!-- ggplot(d1) + -->
<!--   aes(x, y) + -->
<!--   geom_hex()  -->

<!-- ggplot(d1) + -->
<!--   aes(x, y) + -->
<!--   geom_density2d() -->
<!-- ``` -->

<!-- [[ggplot-Referenz](https://ggplot2.tidyverse.org/reference/geom_density_2d.html), [Quellcode](https://www.r-graph-gallery.com/2d-density-plot-with-ggplot2.html)] -->

<!-- Mit `scale_fill_continuous(type = "viridis")`kann man die Farbpalette der Füllfarbe ändern. Nicht so wichtig. -->


<!-- ```{r Normalverteilung-2-bis} -->
<!-- #| echo: false -->
<!-- #| eval: true -->
<!-- #| fig-asp: 1 -->
<!-- #| out-width: "50%" -->
<!-- d1 <-  -->
<!--   tibble(  -->
<!--     x=rnorm(1e4),  -->
<!--     y=rnorm(1e4) -->
<!--   ) -->

<!-- ggplot(d1) + -->
<!--   aes(x, y) + -->
<!--   geom_hex() + -->
<!--   scale_fill_viridis_c() + -->
<!--   theme(legend.position = "bottom") -->

<!-- ggplot(d1) + -->
<!--   aes(x, y) + -->
<!--   geom_density2d() -->
<!-- ``` -->



<!-- ### 2D-Normalverteilung mit R, korreliert, r=0.7 -->



<!-- Die ersten paar Zeilen der Daten: -->

<!-- ```{r Normalverteilung-3-bis, echo = FALSE} -->
<!-- d2 <- rnorm_multi( -->
<!--   n = 1e4, -->
<!--   mu = c(0,0), -->
<!--   sd = c(1, 1), -->
<!--   r = (0.7) -->
<!-- ) -->
<!-- ``` -->

<!-- ```{r Normalverteilung-4-bis} -->
<!-- #| echo: false -->
<!-- d2 %>%  -->
<!--   head(n=3) %>%  -->
<!--   gt() %>%  -->
<!--   fmt_number(columns = everything()) -->
<!-- ``` -->

<!-- Berechnen wir die Korrelation `r`: -->

<!-- ```{r Normalverteilung-5-bis, echo = TRUE, eval = FALSE} -->
<!-- d2 %>%  -->
<!--   summarise( -->
<!--     r = cor(X1,X2), -->
<!--     n = n() -->
<!--   ) -->
<!-- ``` -->

<!-- ```{r Normalverteilung-6-bis} -->
<!-- #| echo: false -->
<!-- d2 %>%  -->
<!--   summarise( -->
<!--     r = cor(X1,X2), -->
<!--     n = n() -->
<!--   ) %>%  -->
<!--   gt() %>%  -->
<!--   fmt_number(columns = everything()) -->
<!-- ``` -->




<!-- ```{r Normalverteilung-7-bis} -->
<!-- #| echo: false -->
<!-- ggplot(d2) + -->
<!--   aes(X1, X2) + -->
<!--   geom_hex() + -->
<!--   scale_fill_viridis_c() + -->
<!--   theme(legend.position = "bottom") -->

<!-- ggplot(d2) + -->
<!--   aes(X1, X2) + -->
<!--   geom_density2d() -->
<!-- ``` -->









## Aufgaben


Zusätzlich zu den Aufgaben im Buch:


- [Lose-Nieten-Binomial-Grid](https://datenwerk.netlify.app/posts/lose-nieten-binomial-grid/lose-nieten-binomial-grid)
- [Bsp-Binomial](https://datenwerk.netlify.app/posts/bsp-binomial/bsp-binomial)






## ---



![](img/outro-04.jpg){width=100%}




